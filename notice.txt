
https://github.com/avwo/whistle

https://zhuanlan.zhihu.com/p/24650656
提高微信公众号文章采集效率，anyproxy进阶使用方法

https://www.chenwenguan.com/wechat-browse-automation/
https://gitee.com/zsyoung01/AnyProxy

/wechat (namespace)
	crawler (msg)
		client (articleInjectJs.js) -> server, 
		connect, interval=1s, 10s 超时
		{readNum,likeNum,postUser,postDate,activityName,js_share_source}
	success (msg)
		server -> client (articleInjectJs.js)
		clearInterval, clearTimeout
		{}
	newData (msg)
		wechatIo -> resultIo (* result.html *)
		console.log
		{otitle,ourl,author,readNum,likeNum,postUser,postDate,activityName,js_share_source}
		add row data to tbody
	noData (msg)
		client (articleInjectJs.js) -> server, 
		connect, timeout=10s,
		{url,title}
	url (msg)
		server -> client (articleInjectJs.js)
		{url, index, total}
	end (msg)
		server -> client (articleInjectJs.js)
		{}

/result (namespace)


injectJs.js
	插入 url 包含 mp.weixin.qq.com/mp/profile_ext? 的 历史文章列表 页
	历史文章列表 页 滚到底后，服务器向客户端发送 url msg, 
	客户端 清除 scrollKey 定时器, 打开第一篇文章的 url


articleInjectJs.js
	插入 url 包含 mp.weixin.qq.com/s? 的 文章内容 页
	文章内容 页 打开后(connect), 定时 1s, 客户端向服务器发送 crawler msg, 


经调试发现，公众号的全部文章列表可以是固定的网页链接，可以直接在微信浏览器里打开，如 
人民日报:   https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=MjM5MjAxNDM4MA==&scene=124
上海证券报: https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=MjM5MDIwNDEyMg==&scene=124
------------------
对应的 json 格式如下
人民日报:   https://mp.weixin.qq.com/mp/profile_ext?action=getmsg&__biz=MjM5MjAxNDM4MA==&f=json&offset=0&count=20&is_ok=1&scene=126
上海证券报: https://mp.weixin.qq.com/mp/profile_ext?action=getmsg&__biz=MjM5MDIwNDEyMg==&f=json&offset=0&count=20&is_ok=1&scene=126
返回的 json 包含最新 10 次公众号的群发文章，一次可以是单图文也可以是多图文。



思路是
1、用户在手机上打开 http://{$IP}:{$PORT}/config_mp 链接 (对应的是本地的 config.html), 
   该 response 页面注入 profileInjectJs.js, 与 nodejs 服务端建立 socket 链接。 
   服务端 wechatIo.emit 'client_jump_url'; 客户端收到后 window.location = data.url; 
   data.url 如 https://mp.weixin.qq.com/mp/profile_ext?action=getmsg&__biz=MjM5MjAxNDM4MA==&f=json&offset=0&count=20&is_ok=1&scene=126
   返回文章列表的 json, 开始抓取公众号。
2、服务端在 *beforeSendResponse(requestDetail, responseDetail) 时, 
   对于返回的 url 形如 'mp.weixin.qq.com/mp/profile_ext?' 并且 response.header['Content-Type'] 形如 application/json; charset=UTF-8
   对于该返回 注入 profileInjectJs.js, 与 nodejs 服务端建立 socket 链接。 
   服务端解析得到的 json, 并且处理: 写日志, post 到外部服务接口, 显示到 http://{$IP}:{$PORT}/
   服务端 wechatIo.emit 'client_jump_url'; 客户端收到后 window.location = data.url; 
   ** 注意在 *beforeSendRequest(requestDetail.requestOptions.headers) 里 Referer 字段的设置(不要出现 http://{$IP}:{$PORT}/config_mp)
3、遍历所有的公众号后, 可以结束, 或者如下
   服务端 wechatIo.emit 'client_jump_url'; 客户端收到后 window.location = data.url; 
   跳转链接是 http://{$IP}:{$PORT}/config_mp 。

注: {$PORT}=9000


请求成功时的
url:
header: {
    "Host":"mp.weixin.qq.com",
    "Connection":"keep-alive",
    "x-wechat-uin":"MjQzNDE1MzIyMg%3D%3D",
    "x-wechat-key":"b504e4e76fc12e4603abc0f4bb25e2625047212290153faa7b475f3745c7073a00551030df6d21657da4c44aacd2d015a4b3ffafda0ac4697824f8f2dd05b9706e8ff21170a8251f91974e3093be8c3d",
    "Upgrade-Insecure-Requests":"1",
    "User-Agent":"Mozilla/5.0 (Linux; Android 8.0.0; MI 5s Build/OPR1.170623.032; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/67.0.3396.87 XWEB/882 MMWEBSDK/190301 Mobile Safari/537.36 MMWEBID/7695 MicroMessenger/7.0.4.1420(0x2700043C) Process/toolsmp NetType/WIFI Language/zh_CN",
    "Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/wxpic,image/apng,*/*;q=0.8",
    "Accept-Encoding":"gzip, deflate",
    "Accept-Language":"zh-CN,en-US;q=0.9",
    "Cookie":"pgv_pvid=6634017053; rewardsn=; wxuin=2434153222; devicetype=android-26; version=2700043c; lang=zh_CN; wxtokenkey=777; sd_userid=88351565922299073; sd_cookie_crttime=1565922299073; pgv_info=ssid=s4630804996; pass_ticket=XbKv8l3zNCBCGycFjP/ZJywYhs+XI1O+yY2+IhQ2duA1QjqmL0FBuUI+fR6KVUs1; wap_sid2=CIb22IgJElxBOTluZzdSZWI4dW9xVWxIWG1UUnlXNmFVMUoxdmU0aTQzdHNORDZpa0N4b1NhMmlMNWdlNkk3d3l3bUNGSjJBWXlMa25SNUhiQWJEUXVJd0s4SmJ1ZjhEQUFBfjD/7fTqBTgNQAE=",
    "X-Requested-With":"com.tencent.mm",
    "Referer":"https://mp.weixin.qq.com/mp/profile_ext?action=getmsg&__biz=MjM5MjAxNDM4MA==&f=json&offset=0&count=20&is_ok=1&scene=126&devicetype=android-26&version=2700043c&lang=zh_CN&nettype=WIFI&a8scene=1&pass_ticket=0YylKhn996NSj3yehGSzLqbO55BFf%2FoGloo728bmeFswMdZN2DH5nVvmCyGENHD3&wx_header=1"
}

请求失败时的
url:
header: {
    "Host":"mp.weixin.qq.com",
    "Connection":"keep-alive",
    "Upgrade-Insecure-Requests":"1",
    "User-Agent":"Mozilla/5.0 (Linux; Android 8.0.0; MI 5s Build/OPR1.170623.032; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/67.0.3396.87 XWEB/882 MMWEBSDK/190301 Mobile Safari/537.36 MMWEBID/7695 MicroMessenger/7.0.4.1420(0x2700043C) Process/toolsmp NetType/WIFI Language/zh_CN",
    "Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/wxpic,image/apng,*/*;q=0.8",
    "Referer":"https://mp.weixin.qq.com/mp/profile_ext?action=getmsg&__biz=MjM5MDIwNDEyMg==&f=json&offset=0&count=20&is_ok=1&scene=126",
    "Accept-Encoding":"gzip, deflate",
    "Accept-Language":"zh-CN,en-US;q=0.9",
    "Cookie":"pgv_pvid=6634017053; rewardsn=; wxuin=2434153222; devicetype=android-26; version=2700043c; lang=zh_CN; wxtokenkey=777; sd_userid=88351565922299073; sd_cookie_crttime=1565922299073; pgv_info=ssid=s4630804996; pass_ticket=XbKv8l3zNCBCGycFjP/ZJywYhs+XI1O+yY2+IhQ2duA1QjqmL0FBuUI+fR6KVUs1; wap_sid2=CIb22IgJElxBOTluZzdSZWI4dW9xVWxIWG1UUnlXNmFVMUoxdmU0aTQzdHNORDZpa0N4b1NhMmlMNWdlNkk3d3l3bUNGSjJBWXlMa25SNUhiQWJEUXVJd0s4SmJ1ZjhEQUFBfjD/7fTqBTgNQAE=",
    "X-Requested-With":"com.tencent.mm"
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

安卓模拟器经常会访问一些http://google.com的地址，这样会导致anyproxy死机，找到函数replaceRequestOption : function(req,option)，修改函数内容：

replaceRequestOption : function(req,option){
        var newOption = option;
        if(/google/i.test(newOption.headers.host)){
            newOption.hostname = "www.baidu.com";
            newOption.port     = "80";
        }
        return newOption;
    },

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


这两段程序的意义是：从队列表中读取出下一个采集内容的信息，如果是历史消息页，则将biz拼接到地址中（注意：评论区有朋友以为key和pass_ticket也要拼接，实则不需要），通过js的方式输出到页面，如果下一条是文章，则将历史消息列表json中的文章地址直接输出为js。同样文章内容的地址中不包含uin和key这样的参数，这些参数都是由客户端自动补充的。
